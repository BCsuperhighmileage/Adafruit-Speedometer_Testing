// This is testing and may not work as expected

#include <SPI.h>
#include <RH_RF95.h>
#include <WiFi.h>

const char *ssid = "SSID_HERE"; 
const char *password = "PASSWORD_HERE";
const char *staticIP = "192.168.1.100";
const char *gateway = "192.168.1.1";  // Replace with your gateway/router IP address
const char *subnet = "255.255.255.0";

#define RFM95_CS   33
#define RFM95_INT  12
#define RFM95_RST  27
#define RF95_FREQ  904.0

RH_RF95 rf95(RFM95_CS, RFM95_INT);

char message[256];
WiFiServer server(80);
WiFiClient client;

void setup() {
    pinMode(RFM95_RST, OUTPUT);
    digitalWrite(RFM95_RST, HIGH);
    Serial.begin(115200);
    while (!Serial) delay(1);
    delay(100);

    IPAddress staticIPaddr;
    staticIPaddr.fromString(staticIP);
    IPAddress gatewayAddr;
    gatewayAddr.fromString(gateway);
    IPAddress subnetMask;
    subnetMask.fromString(subnet);

    WiFi.config(staticIPaddr, gatewayAddr, subnetMask);

    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.println("Connecting to WiFi...");
    }
    Serial.println("Connected to WiFi");

    Serial.println("Feather LoRa RX Test!");

    digitalWrite(RFM95_RST, LOW);
    delay(10);
    digitalWrite(RFM95_RST, HIGH);
    delay(10);

    while (!rf95.init()) {
        Serial.println("LoRa radio init failed");
        Serial.println("Uncomment '#define SERIAL_DEBUG' in RH_RF95.cpp for detailed debug info");
        while (1);
    }
    Serial.println("LoRa radio init OK!");

    if (!rf95.setFrequency(RF95_FREQ)) {
        Serial.println("setFrequency failed");
        while (1);
    }
    Serial.print("Set Freq to: "); Serial.println(RF95_FREQ);

    rf95.setTxPower(20, true);
    rf95.setSpreadingFactor(12);

    server.begin();
}

void loop() {
    if (rf95.available()) {
        uint8_t buf[RH_RF95_MAX_MESSAGE_LEN];
        uint8_t len = sizeof(buf);
        if (rf95.recv(buf, &len)) {
            Serial.print("Received: ");
            // Convert the received buffer to a string
            buf[len] = '\0';
            Serial.println((char*)buf);
            Serial.print("RSSI: ");
            Serial.println(rf95.lastRssi(), DEC);

            // Call the TCP function with the message
            TCP((char*)buf);
        } else {
            Serial.println("Receive failed");
        }
    }

    delay(100);
}

void TCP(char* message) {
    client = server.available();

    if (client) {
        Serial.println("Client connected");

        while (client.connected()) {
            static unsigned long lastMillis = 0;
            if (millis() - lastMillis >= 1000) {
                client.println(message);
                Serial.println("Message sent to client");
                lastMillis = millis();
            }

            if (client.available()) {
                char c = client.read();
                Serial.write(c);
                // Process the received data from Python
                // You can add your logic here
            }
        }

        Serial.println("Client disconnected");
    }
}

